/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9
Title: Apple iPhone 13 Pro Max
*/

import React, { useEffect, useRef } from "react";
import { useAnimations, useGLTF, useVideoTexture } from "@react-three/drei";

export function DemoMobile(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "/models/apple_iphone_13_pro_max.glb"
  );
  const { actions } = useAnimations(animations, group);

  const txt = useVideoTexture(
    props.texture ? props.texture : "/textures/project/project4.mp4"
  );

  console.log(txt);

  useEffect(() => {
    if (txt) {
      txt.flipY = false; // Prevent the texture from flipping vertically
      const videoAspect = txt.image.videoWidth / txt.image.videoHeight;
      const screenAspect = 2340 / 1080; // iPhone 12 Mini screen aspect ratio (19.5:9)

      if (videoAspect > screenAspect) {
        // Video is wider than the screen
        txt.repeat.set(screenAspect / videoAspect, 1); // Scale width
        txt.offset.set((1 - txt.repeat.x) / 2, 0); // Center horizontally
      } else {
        // Video is taller than the screen
        txt.repeat.set(1, videoAspect / screenAspect); // Scale height
        txt.offset.set(0, (1 - txt.repeat.y) / 2); // Center vertically
      }
    }
  }, [txt]);
  return (
    <group {...props} dispose={null}>
      <group scale={0.01}>
        <group scale={100}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Frame_Frame_0.geometry}
            material={materials.Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Frame_Frame2_0.geometry}
            material={materials.Frame2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Frame_Port_0.geometry}
            material={materials.Port}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Frame_Antenna_0.geometry}
            material={materials.Antenna}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Frame_Mic_0.geometry}
            material={materials.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body_Mic_0.geometry}
            material={materials.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body_Bezel_0.geometry}
            material={materials.Bezel}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body_Body_0.geometry}
            material={materials.Body}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body_Wallpaper_0.geometry}
            material={materials.Wallpaper}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body_Camera_Glass_0.geometry}
            material={materials.Camera_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body_Lens_0.geometry}
            material={materials.Lens}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body_Material_0.geometry}
            material={materials.Material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera_Body_0.geometry}
            material={materials.Body}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera_Glass_0.geometry}
            material={materials.Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera_Camera_Frame001_0.geometry}
            material={materials["Camera_Frame.001"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera_Mic_0.geometry}
            material={materials.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Body001_Screen_Glass_0.geometry}
            material={materials.Screen_Glass}
          >
            <meshBasicMaterial map={txt} toneMapped={false} />
          </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Button_Frame_0.geometry}
            material={materials.Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle003_Frame_0.geometry}
            material={materials.Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Apple_Logo_Logo_0.geometry}
            material={materials.Logo}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Body_0.geometry}
            material={materials.Body}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Gray_Glass_0.geometry}
            material={materials.Gray_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Flash_0.geometry}
            material={materials.Flash}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Port_0.geometry}
            material={materials.Port}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Camera_Frame_0.geometry}
            material={materials.Camera_Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Camera_Glass_0.geometry}
            material={materials.Camera_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Lens_0.geometry}
            material={materials.Lens}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera001_Black_Glass_0.geometry}
            material={materials.Black_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Camera003_Material002_0.geometry}
            material={materials["Material.002"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/apple_iphone_13_pro_max.glb");

export default DemoMobile;
